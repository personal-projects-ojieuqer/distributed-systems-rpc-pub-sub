@using HPCVisualizerFE.Models
@model SensorViewModel

@{
    Layout = null;
    ViewData["Title"] = "Visualização por Sensor";

    double thresholdTemperature = 25.0;
    double thresholdGyroscope = 10.0;
    double thresholdAccelerometer = 12.0;
    double thresholdHydrophone = 125.0;

    Func<string, double> GetThreshold = sensor => sensor switch
    {
        "temperature" => thresholdTemperature,
        "gyroscope" => thresholdGyroscope,
        "accelerometer" => thresholdAccelerometer,
        "hydrophone" => thresholdHydrophone,
        _ => 1000
    };
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.umd.min.js"></script>

    <style>
        :root {
            --bg: #1e1e2f;
            --text: #f0f0f0;
            --card: #2b2b3d;
        }

        body {
            background-color: var(--bg);
            color: var(--text);
        }

        .form-label, .form-select, .btn {
            color: var(--text);
        }

        .form-select {
            background-color: var(--card);
            border: 1px solid #555;
        }

        .card {
            background-color: var(--card);
            border: none;
        }

        .btn-outline-primary {
            border-color: #0d6efd;
            color: #0d6efd;
        }

        .btn-outline-light {
            border-color: #ccc;
            color: #ccc;
        }
    </style>
</head>
<body>
    <div class="container mt-4 mb-5">
        <h2 class="text-center mb-4">📊 Análise Previsional por Sensor</h2>

        <form method="get" class="row g-3 mb-4 justify-content-center">
            <div class="col-md-4">
                <label for="sensor" class="form-label">🔧 Sensor:</label>
                <select class="form-select" name="sensor" id="sensor" onchange="this.form.submit()">
                    <option disabled selected>-- Escolher sensor --</option>
                    @foreach (var sensor in Model.SensoresDisponiveis.OrderBy(s => s))
                    {
                        <option value="@sensor" selected="@(sensor == Model.SensorSelecionado)">@sensor</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label for="wavyFilter" class="form-label">🌊 WAVY:</label>
                <select class="form-select" id="wavyFilter" onchange="filterWavy(this.value)">
                    <option value="">-- Todos --</option>
                    @foreach (var wavy in Model.DadosPorWavy.Select(w => w.WavyId).OrderBy(w => w))
                    {
                        <option value="@wavy">@wavy</option>
                    }
                </select>
            </div>
            <div class="col-md-4 d-flex align-items-end justify-content-evenly">
                <button type="button" class="btn btn-outline-primary" onclick="downloadChart()">📥 Gráfico</button>
                <button type="button" class="btn btn-outline-light" onclick="toggleTheme()">🌓 Modo</button>
                <a class="btn btn-outline-success" href="@Url.Action("VisualizacaoPrevisao", "Home", new { sensor = Model.SensorSelecionado })">🔮 Previsão Pura</a>
            </div>
        </form>

        @if (Model.DadosPorWavy?.Any() == true)
        {
            <div class="mb-4">
                <canvas id="multiChart" height="420"></canvas>
            </div>

            <div class="row g-3">
                @foreach (var wavy in Model.DadosPorWavy)
                {
                    var mediaConfianca = wavy.Previsoes.Any() ? wavy.Previsoes.Average(p => p.Confianca) : 0;
                    var classificacoes = wavy.Previsoes.GroupBy(p => p.Classificacao).OrderByDescending(g => g.Count()).FirstOrDefault()?.Key ?? "—";

                    var mediaReal = wavy.DadosReais.Any() ? wavy.DadosReais.Take(5).Average() : 0;
                    var mediaModeloA = wavy.Previsoes.Any() ? wavy.Previsoes.Average(p => p.ModeloA) : 0;
                    var mediaModeloB = wavy.Previsoes.Any() ? wavy.Previsoes.Average(p => p.ModeloB) : 0;
                    var limiar = GetThreshold(Model.SensorSelecionado ?? "");
                    bool alerta = mediaReal > limiar || mediaModeloA > limiar || mediaModeloB > limiar;

                    <div class="col-md-6">
                        <div class="card p-3 text-light mb-3">
                            <h5 class="card-title">@wavy.WavyId</h5>

                            @if (alerta)
                            {
                                <div class="alert alert-danger p-2 mb-2">
                                    🚨 <strong>Alerta:</strong> Média excedeu o limite para o sensor (@limiar)
                                </div>
                            }

                            <p class="mb-1">🔍 Classificação dominante: <strong>@classificacoes</strong></p>
                            <p>✅ Confiabilidade média: <strong>@mediaConfianca.ToString("F2")</strong></p>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-warning text-center">⚠️ Seleciona um sensor para visualizar dados e previsões.</p>
        }
    </div>

    <script>
        let allDatasets = [];
        const cores = ['#0dcaf0', '#ffc107', '#20c997', '#d63384', '#0d6efd', '#198754', '#6f42c1'];

        function getColor(key) {
            const hash = [...key].reduce((a, c) => a + c.charCodeAt(0), 0);
            return cores[hash % cores.length];
        }

        const ctx = document.getElementById('multiChart')?.getContext('2d');
        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [...Array(5).keys()].map(i => `T+${i}min`),
                datasets: []
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            color: '#ccc',
                            boxWidth: 20,
                            padding: 12,
                            font: {
                                size: 11
                            },
                            generateLabels: function (chart) {
                                const items = Chart.defaults.plugins.legend.labels.generateLabels(chart);
                                return items.sort((a, b) => a.text.localeCompare(b.text));
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: '📈 Dados + Previsões por WAVY',
                        color: '#fff',
                        font: { size: 18 }
                    },
                    tooltip: {
                        callbacks: {
                            label: ctx => `${ctx.dataset.label}: ${ctx.raw}`
                        }
                    }
                },
                layout: {
                    padding: { top: 10, bottom: 10 }
                },

                scales: {
                    y: {
                        ticks: {
                            color: '#aaa'
                        }
                    },
                    x: {
                        ticks: {
                            color: '#aaa'
                        }
                    }
                }
            }
        });


        function gerarDatasets() {
            let datasets = [];
        @foreach (var wavy in Model.DadosPorWavy)
        {
            <text>
                    datasets.push({
                        label: '@wavy.WavyId (Real)',
                        data: @Html.Raw(Json.Serialize(wavy.DadosReais.Take(5))),
                        borderColor: getColor('@wavy.WavyId'),
                        borderWidth: 2,
                        tension: 0.4,
                        wavy: '@wavy.WavyId'
                    });
                datasets.push({
                    label: '@wavy.WavyId (Modelo A)',
                    data: @Html.Raw(Json.Serialize(wavy.Previsoes.Select(p => p.ModeloA))),
                    borderColor: getColor('@wavy.WavyId'),
                    borderDash: [5, 5],
                    borderWidth: 1,
                    tension: 0.4,
                    wavy: '@wavy.WavyId'
                });
                datasets.push({
                    label: '@wavy.WavyId (Modelo B)',
                    data: @Html.Raw(Json.Serialize(wavy.Previsoes.Select(p => p.ModeloB))),
                    borderColor: getColor('@wavy.WavyId'),
                    borderDash: [2, 4],
                    borderWidth: 1,
                    tension: 0.4,
                    wavy: '@wavy.WavyId'
                });
            </text>
        }
                                    return datasets;
        }

        allDatasets = gerarDatasets();
        chart.data.datasets = allDatasets;
        chart.update();

        function filterWavy(wavyId) {
            chart.data.datasets = !wavyId
                ? allDatasets
                : allDatasets.filter(d => d.label.includes(wavyId));
            chart.update();
        }

        function downloadChart() {
            const link = document.createElement('a');
            link.href = chart.toBase64Image();
            link.download = 'grafico_previsoes.png';
            link.click();
        }

        function applyTheme(dark) {
            const root = document.documentElement.style;
            if (dark) {
                root.setProperty('--bg', '#1e1e2f');
                root.setProperty('--text', '#f0f0f0');
                root.setProperty('--card', '#2b2b3d');
            } else {
                root.setProperty('--bg', '#ffffff');
                root.setProperty('--text', '#212529');
                root.setProperty('--card', '#f8f9fa');
            }
            localStorage.setItem('dark-mode', dark);
        }

        function toggleTheme() {
            const dark = localStorage.getItem('dark-mode') === 'true';
            applyTheme(!dark);
        }

        document.addEventListener("DOMContentLoaded", () => {
            const saved = localStorage.getItem('dark-mode') === 'true';
            applyTheme(saved);
        });
    </script>
</body>
</html>
