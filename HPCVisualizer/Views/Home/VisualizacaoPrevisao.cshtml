@using HPCVisualizerFE.Models
@model SensorViewModel

@{
    Layout = null;
    ViewData["Title"] = "Previsão Pura por Sensor";
}

<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --bg: #1e1e2f;
            --text: #f0f0f0;
            --card: #2b2b3d;
        }

        body {
            background-color: var(--bg);
            color: var(--text);
        }

        .form-label, .form-select, .btn {
            color: var(--text);
        }

        .form-select {
            background-color: var(--card);
            border: 1px solid #555;
        }

        .card {
            background-color: var(--card);
            border: none;
        }

        .btn-outline-primary {
            border-color: #0d6efd;
            color: #0d6efd;
        }

        .btn-outline-light {
            border-color: #ccc;
            color: #ccc;
        }

        .btn-outline-success {
            border-color: #198754;
            color: #198754;
        }
    </style>
</head>
<body>
    <div class="container mt-4 mb-5">
        <h2 class="text-center mb-4">🔮 Previsão Futura</h2>

        <form method="get" class="row g-3 mb-4 justify-content-center">
            <div class="col-md-4">
                <label for="sensor" class="form-label">🔧 Sensor:</label>
                <select class="form-select" name="sensor" id="sensor" onchange="this.form.submit()">
                    <option disabled selected>-- Escolher sensor --</option>
                    @foreach (var sensor in Model.SensoresDisponiveis.OrderBy(s => s))
                    {
                        <option value="@sensor" selected="@(sensor == Model.SensorSelecionado)">@sensor</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label for="wavyFilter" class="form-label">🌊 WAVY:</label>
                <select class="form-select" id="wavyFilter" onchange="filterWavy(this.value)">
                    <option value="">-- Todos --</option>
                    @foreach (var wavy in Model.DadosPorWavy.Select(w => w.WavyId).OrderBy(w => w))
                    {
                        <option value="@wavy">@wavy</option>
                    }
                </select>
            </div>
            <div class="col-md-4 d-flex align-items-end justify-content-evenly">
                <button type="button" class="btn btn-outline-primary" onclick="downloadChart()">📥 Gráfico</button>
                <button type="button" class="btn btn-outline-light" onclick="toggleTheme()">🌓 Modo</button>
                <a class="btn btn-outline-success" href="@Url.Action("Index", "Home", new { sensor = Model.SensorSelecionado })">🔮 Prev. Vals Reais</a>
            </div>
        </form>

        @if (Model.DadosPorWavy?.Any() == true)
        {
            <div class="mb-4">
                <canvas id="pureChart" height="420"></canvas>
            </div>

            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const ctx = document.getElementById('pureChart').getContext('2d');
                    const chart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: [...Array(10).keys()].map(i => `T${i < 5 ? '-' : '+'}${Math.abs(i - 5)}min`),
                            datasets: []
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: { position: 'top', labels: { color: '#ccc' } },
                                title: {
                                    display: true,
                                    text: '📈 Previsões Futuras por WAVY',
                                    color: '#fff',
                                    font: { size: 18 }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: false,
                                    suggestedMin: 0,    // ajuste conforme seus dados
                                    suggestedMax: 100,  // ajuste conforme seus dados
                                    ticks: {
                                        color: '#aaa'
                                    }
                                },
                                x: {
                                    ticks: {
                                        color: '#aaa'
                                    }
                                }
                            }
                        }
                    });

                    const cores = ['#0dcaf0', '#ffc107', '#20c997', '#d63384', '#0d6efd', '#198754', '#6f42c1'];

                    function getColor(key) {
                        const hash = [...key].reduce((a, c) => a + c.charCodeAt(0), 0);
                        return cores[hash % cores.length];
                    }

                    @foreach (var wavy in Model.DadosPorWavy)
                    {
                        var reais = wavy.DadosReais.TakeLast(5).ToList();
                        var modeloA = wavy.Previsoes.Select(p => p.ModeloA).ToList();
                        var modeloB = wavy.Previsoes.Select(p => p.ModeloB).ToList();

                        var reaisMaisA = reais.Concat(modeloA).ToList();
                        var nullsReais = Enumerable.Repeat<double?>(null, reais.Count).ToList();
                        var modeloAOnly = nullsReais.Concat(modeloA.Select(x => (double?)x)).ToList();
                        var modeloBOnly = nullsReais.Concat(modeloB.Select(x => (double?)x)).ToList();

                        <text>
                            chart.data.datasets.push({
                                label: '@wavy.WavyId (Real)',
                                data: @Html.Raw(Json.Serialize(reaisMaisA.Select<double, double?>((v, i) => i < @reais.Count ? v : (double?)null))),
                                borderColor: getColor('@wavy.WavyId'),
                                borderWidth: 2,
                                tension: 0.4
                            });

                            chart.data.datasets.push({
                                label: '@wavy.WavyId (Modelo A)',
                                data: @Html.Raw(Json.Serialize(modeloAOnly)),
                                borderColor: getColor('@wavy.WavyId'),
                                borderDash: [5, 5],
                                borderWidth: 1,
                                tension: 0.4
                            });

                            chart.data.datasets.push({
                                label: '@wavy.WavyId (Modelo B)',
                                data: @Html.Raw(Json.Serialize(modeloBOnly)),
                                borderColor: getColor('@wavy.WavyId'),
                                borderDash: [2, 4],
                                borderWidth: 1,
                                tension: 0.4
                            });
                        </text>
                    }

                    chart.update();
                    window.chart = chart;
                    window.allDatasets = chart.data.datasets;
                });
            </script>
        }
        else
        {
            <p class="text-warning text-center">⚠️ Seleciona um sensor para visualizar previsões.</p>
        }
    </div>

    <script>
        function filterWavy(wavyId) {
            chart.data.datasets = !wavyId
                ? allDatasets
                : allDatasets.filter(d => d.label.includes(wavyId));
            chart.update();
        }

        function downloadChart() {
            const link = document.createElement('a');
            link.href = chart.toBase64Image();
            link.download = 'grafico_previsoes.png';
            link.click();
        }

        function applyTheme(dark) {
            const root = document.documentElement.style;
            if (dark) {
                root.setProperty('--bg', '#1e1e2f');
                root.setProperty('--text', '#f0f0f0');
                root.setProperty('--card', '#2b2b3d');
            } else {
                root.setProperty('--bg', '#ffffff');
                root.setProperty('--text', '#212529');
                root.setProperty('--card', '#f8f9fa');
            }
            localStorage.setItem('dark-mode', dark);
        }

        function toggleTheme() {
            const dark = localStorage.getItem('dark-mode') === 'true';
            applyTheme(!dark);
        }

        document.addEventListener("DOMContentLoaded", () => {
            const saved = localStorage.getItem('dark-mode') === 'true';
            applyTheme(saved);
        });
    </script>
</body>
</html>
